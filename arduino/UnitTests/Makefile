# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#

#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Target
TARGET=vectortests

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest

# Where to find user code.
USER_DIR =../SerialVectorGenerator

# Tests
TESTS =                             \
		ring_mem_pool_tests.cpp     \
		#command_parser_tests.cpp    \
	    #screen_controller_tests.cpp \

# All of the sources I want compiled
SRC =                     \
	  ring_mem_pool.c     \
	  #command_parser.c    \
	  #screen_controller.c \

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to C and C++ compiler
DEFINES = -D DEBUG \
		  #-D NO_PERPHS \
		  #-D NO_PORTS

FLAGS = -I$(USER_DIR) -IGtest/include $(DEFINES)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra $(FLAGS)

# Flags passed to the C compiler
CCFLAGS = -g -Wall -Wextra $(FLAGS) 

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TARGET)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

USER_OBJS = $(SRC:%.c=$(USER_DIR)/%.c.o)
TEST_OBJS = $(TESTS:%.cpp=%.cpp.o)
OBJS = $(USER_OBJS) $(TEST_OBJS)
LOCAL_OBJS = $(notdir $(OBJS))


# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc
#
#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
#                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc
#
#sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(USER_DIR)/%.c.o : $(USER_DIR)/%.c
	$(CC) $(CCFLAGS) -c -o $(notdir $@) $<

$(USER_DIR)/%.cpp.o : $(USER_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $(notdir $@) $<

$(TEST_OBJS): %.cpp.o: %.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

#%.c.o : %.c
#	$(CC) $(CCFLAGS) -c -o $@ $<
#
#%.cpp.o : %.cpp
#	$(CXX) $(CXXFLAGS) -c -o $@ $<

$(TARGET) : gtest_main.a $(OBJS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $(notdir $^) -o $(TARGET) 


#########

clean :
	rm -f $(TARGET) $(LOCAL_OBJS)

clean-all : clean 
	rm -f gtest.a gtest_main.a *.o

